#include <iostream>
#include <string>
using namespace std;

struct node // Node Declaration
{
    string label;
    int ch_count;
    struct node* child[10];
} * root;

class GT // Class Declaration
{
public:
    void create_tree();
    void display(node* r1);
    void delete_tree(node* r1);  // Function to delete the tree and free memory

    GT()
    {
        root = NULL;
    }

    ~GT() {
        // Destructor to clean up memory
        delete_tree(root);
    }
};

// Function to delete tree (recursive)
void GT::delete_tree(node* r1)
{
    if (r1 != NULL)
    {
        for (int i = 0; i < r1->ch_count; i++)
        {
            delete_tree(r1->child[i]);  // Recursively delete the children
        }
        delete r1;  // Delete the current node
    }
}

// Function to create a tree structure (book -> chapters -> sections)
void GT::create_tree()
{
    int tchapters;
    root = new node;
    
    cout << "Enter name of book: ";
    cin.ignore();  // Clear the input buffer
    getline(cin, root->label);  // Read book name

    cout << "Enter number of chapters in the book: ";
    cin >> tchapters;
    root->ch_count = tchapters;

    for (int i = 0; i < tchapters; i++)
    {
        root->child[i] = new node;

        cout << "Enter the name of Chapter " << i + 1 << ": ";
        cin.ignore();
        getline(cin, root->child[i]->label);  // Read chapter name

        cout << "Enter number of sections in Chapter " << root->child[i]->label << ": ";
        cin >> root->child[i]->ch_count;

        for (int j = 0; j < root->child[i]->ch_count; j++)
        {
            root->child[i]->child[j] = new node;

            cout << "Enter Name of Section " << j + 1 << " in Chapter " << root->child[i]->label << ": ";
            cin.ignore();
            getline(cin, root->child[i]->child[j]->label);  // Read section name
        }
    }
}

// Function to display the entire tree (book -> chapters -> sections)
void GT::display(node* r1)
{
    if (r1 != NULL)
    {
        cout << "\n----- Book Hierarchy -----" << endl;
        cout << "Book Title: " << r1->label << endl;

        for (int i = 0; i < r1->ch_count; i++)
        {
            cout << "\nChapter " << i + 1 << ": " << r1->child[i]->label;
            cout << "\nSections: ";

            for (int j = 0; j < r1->child[i]->ch_count; j++)
            {
                cout << "\n  " << r1->child[i]->child[j]->label;
            }
        }
        cout << "\n--------------------------" << endl;
    }
    else
    {
        cout << "No tree exists!" << endl;
    }
}

// Main Function to interact with the user
int main()
{
    int choice;
    GT gt;

    while (true)
    {
        cout << "\n------------------ Book Tree Menu ------------------" << endl;
        cout << "1. Create Book Structure" << endl;
        cout << "2. Display Book Structure" << endl;
        cout << "3. Quit" << endl;
        cout << "-----------------------------------------------------" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice)
        {
        case 1:
            gt.create_tree();
            break;
        case 2:
            gt.display(root);
            break;
        case 3:
            cout << "Thanks for using the program!" << endl;
            return 0;
        default:
            cout << "Invalid choice! Please try again." << endl;
            break;
        }
    }

    return 0;
}